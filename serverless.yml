service: lambda-daily-emails
frameworkVersion: '3'

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    slim: true
    dockerizePip: true
    useDownloadCache: false
    useStaticCache: false
    fileName: ${custom.branch.${env:BRANCH_NAME}}
  
  branch:
    - develop: requirements-develop.txt
    - master: requirements-master.txt
    - main: requirements-main.txt


package:
  individually: true
  patterns:
    - '.github/**'
    - '__pycache__/**'
    - 'rough.py'
    - 'sample-questions.json'
    - 'question.html'
    - 'README.md'
provider:
  name: aws
  runtime: python3.8

  stage: ${env:MY_ENV}
  region: ${env:MY_REGION}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
            - dynamodb:Get*
            - dynamodb:Query
            - dynamodb:Scan
          Resource: "*"

functions:
  emailer:
    handler: handler.emailer
    environment:
      MY_ENV: ${env:MY_ENV}
      MY_REGION: ${env:MY_REGION}

resources:
  Resources:
    invokeLambda:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: 
          "Fn::GetAtt": [EmailerLambdaFunction, Arn]
        Principal: events.amazonaws.com
